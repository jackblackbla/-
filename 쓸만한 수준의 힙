
void HeapInit(Heap* ph, PriorityComp pc) {
    ph->numofData = 0;
    ph->comp = pc;
}
int IsEmpty(Heap* ph) {
    if (ph->numofData == 0)
        return TRUE;
    else
        return FALSE;
}

int GetLChildIDX(int idx) {
    return idx * 2;
}

int GetRChildIDX(int idx) {
    return idx * 2 + 1;
}

int GetParentIDX(int idx) {
    return idx / 2;
}

int GetHighPriChildIDX(Heap* ph, int idx) {
    if (GetLChildIDX(idx) > ph->numofData) {
        return 0;
    }
    else if (GetLChildIDX(idx) == ph->numofData) {
        return GetLChildIDX(idx);
    }
    else {
        if (ph->comp(ph->heapArr[GetLChildIDX(idx)], ph->heapArr[GetRChildIDX(idx)]) > 0) {
            return GetLChildIDX(idx);
        }
        else
            return GetRChildIDX(idx);
    }

}

void HInsert(Heap* ph, HData data) {
    int idx = ph->numofData + 1;

    while (idx != 1) {
        if (ph->comp(data, ph->heapArr[GetParentIDX(idx)]) > 0) {
            ph->heapArr[idx] = ph->heapArr[GetParentIDX(idx)];
            idx = GetParentIDX(idx);
        }
        else
            break;
    }

    ph->heapArr[idx] = data;
    (ph->numofData)++;
}

HData HDelete(Heap* ph) {
    HData retData = ph->heapArr[1];
    HData LastElem = ph->heapArr[ph->numofData];

    int parentIdx = 1;
    int childIdx ;

    while (childIdx = GetHighPriChildIDX(ph, parentIdx)) {
        if (ph->comp(LastElem, ph->heapArr[parentIdx]) >= 0)
            break;
        ph->heapArr[parentIdx] = ph->heapArr[childIdx];
        parentIdx = childIdx;


    }
    ph->heapArr[parentIdx] = LastElem;
    ph->numofData -= 1;
    return retData;

}
